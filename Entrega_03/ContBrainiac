import Control.Monad.State
import qualified Data.Map as Map

type SymTab = Map.Map String Double

type Evaluator a = State SymTab a

lookUp :: String -> Evaluator Double
lookUp str = do
    symTab <- get
    case M.lookup str symTab 
        Just v -> return v
        Nothing -> error $ "Variable no definida " ++ str

addSymbol :: String -> Double -> Evaluator ()
addSymbol str val = do
    symTab <- get
    put $ M.insert str val symTab
    return ()

evaluate :: Exp -> Evaluator Double

evaluate (UnaryNode op tree) = do
    x <- evaluate tree
    case op of
        Plus -> return x
        Minus -> return (-x)

evaluate (E_BinOp op left right) = do
    lft -> evaluate left
    rgt -> evaluate right
    case op of 
        Sum -> return $ lft + rgt
        Minus -> return $ lft - rgt

evaluate (E_Const n) = return n

evaluate (E_Var v) = lookUp v 

evaluate (I_Assign str tree) = do
    v <- evaluate tree
    addSymbol str v 
    return v

evaluate (I_If cond exito) = do
    eval_cond <- eval cond
    if (val `notEqual` val2) then eval exito

evaluate (I_IfElse cond exito fallo) = do
    eval_cond <- eval cond
    if (eval_cond == true) then eval exito
                           else eval fallo

main :: IO ()
main = do
    s <- getContents
    print $ runState $ evaluate . parse . lexer s
